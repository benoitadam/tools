{"mappings":"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","sources":["<anon>","src/array.spec.ts","src/array.ts"],"sourcesContent":["function $8b11d7d70da98dc1$export$fe2d9b4e03920b4c(items, item) {\n    const i = items.indexOf(item);\n    if (i === -1) return items;\n    items.splice(i, 1);\n    return items;\n}\nfunction $8b11d7d70da98dc1$export$ec937e64de6c1257(items, item, addIndex) {\n    const oldIndex = items.indexOf(item);\n    if (oldIndex === -1) return items;\n    let index = (oldIndex + addIndex) % 5;\n    if (index < 0) index += items.length;\n    if (oldIndex === index) return items;\n    items.splice(oldIndex, 1);\n    items.splice(index, 0, item);\n    return items;\n}\nfunction $8b11d7d70da98dc1$export$4c7897fafd92b108(items) {\n    return items[items.length - 1];\n}\n\n\ndescribe(\"array\", ()=>{\n    test(`removeItem`, ()=>{\n        const items = [\n            0,\n            1,\n            2,\n            3\n        ];\n        expect((0, $8b11d7d70da98dc1$export$fe2d9b4e03920b4c)(items, 3)).toEqual([\n            0,\n            1,\n            2\n        ]);\n        expect((0, $8b11d7d70da98dc1$export$fe2d9b4e03920b4c)(items, 2)).toEqual([\n            0,\n            1\n        ]);\n        expect((0, $8b11d7d70da98dc1$export$fe2d9b4e03920b4c)(items, 0)).toEqual([\n            1\n        ]);\n        const a = {};\n        items.push(2, 3, a);\n        expect((0, $8b11d7d70da98dc1$export$fe2d9b4e03920b4c)(items, a)).toEqual([\n            1,\n            2,\n            3\n        ]);\n    });\n    test(`moveItem`, ()=>{\n        const items = [\n            0,\n            1,\n            2,\n            3\n        ];\n        expect((0, $8b11d7d70da98dc1$export$ec937e64de6c1257)(items, 3, -1)).toEqual([\n            0,\n            1,\n            3,\n            2\n        ]);\n        expect((0, $8b11d7d70da98dc1$export$ec937e64de6c1257)(items, 3, 1)).toEqual([\n            0,\n            1,\n            2,\n            3\n        ]);\n        expect((0, $8b11d7d70da98dc1$export$ec937e64de6c1257)(items, 0, 2)).toEqual([\n            1,\n            2,\n            0,\n            3\n        ]);\n        expect((0, $8b11d7d70da98dc1$export$ec937e64de6c1257)(items, 0, -2)).toEqual([\n            0,\n            1,\n            2,\n            3\n        ]);\n        const a = {};\n        items.push(a);\n        expect((0, $8b11d7d70da98dc1$export$ec937e64de6c1257)(items, a, -1)).toEqual([\n            0,\n            1,\n            2,\n            a,\n            3\n        ]);\n        expect((0, $8b11d7d70da98dc1$export$ec937e64de6c1257)(items, a, -1)).toEqual([\n            0,\n            1,\n            a,\n            2,\n            3\n        ]);\n        expect((0, $8b11d7d70da98dc1$export$ec937e64de6c1257)(items, a, 1)).toEqual([\n            0,\n            1,\n            2,\n            a,\n            3\n        ]);\n        expect((0, $8b11d7d70da98dc1$export$ec937e64de6c1257)(items, a, 1)).toEqual([\n            0,\n            1,\n            2,\n            3,\n            a\n        ]);\n        expect((0, $8b11d7d70da98dc1$export$ec937e64de6c1257)(items, a, 1)).toEqual([\n            a,\n            0,\n            1,\n            2,\n            3\n        ]);\n        expect((0, $8b11d7d70da98dc1$export$ec937e64de6c1257)(items, a, 1)).toEqual([\n            0,\n            a,\n            1,\n            2,\n            3\n        ]);\n        expect((0, $8b11d7d70da98dc1$export$ec937e64de6c1257)(items, a, 5)).toEqual([\n            0,\n            a,\n            1,\n            2,\n            3\n        ]);\n        expect((0, $8b11d7d70da98dc1$export$ec937e64de6c1257)(items, a, 20)).toEqual([\n            0,\n            a,\n            1,\n            2,\n            3\n        ]);\n        expect((0, $8b11d7d70da98dc1$export$ec937e64de6c1257)(items, a, -20)).toEqual([\n            0,\n            a,\n            1,\n            2,\n            3\n        ]);\n        expect((0, $8b11d7d70da98dc1$export$ec937e64de6c1257)(items, a, 4)).toEqual([\n            a,\n            0,\n            1,\n            2,\n            3\n        ]);\n    });\n    test(`last`, async ()=>{\n        expect((0, $8b11d7d70da98dc1$export$4c7897fafd92b108)([\n            0,\n            1,\n            2\n        ])).toEqual(2);\n    }, 10);\n});\n\n\n//# sourceMappingURL=array.spec.js.map\n","import { removeItem, moveItem, last } from './array';\n\ndescribe('array', () => {\n  test(`removeItem`, () => {\n    const items: any[] = [0, 1, 2, 3];\n    expect(removeItem(items, 3)).toEqual([0, 1, 2]);\n    expect(removeItem(items, 2)).toEqual([0, 1]);\n    expect(removeItem(items, 0)).toEqual([1]);\n    const a = {};\n    items.push(2, 3, a);\n    expect(removeItem(items, a)).toEqual([1, 2, 3]);\n  });\n\n  test(`moveItem`, () => {\n    const items: any[] = [0, 1, 2, 3];\n    expect(moveItem(items, 3, -1)).toEqual([0, 1, 3, 2]);\n    expect(moveItem(items, 3, +1)).toEqual([0, 1, 2, 3]);\n    expect(moveItem(items, 0, +2)).toEqual([1, 2, 0, 3]);\n    expect(moveItem(items, 0, -2)).toEqual([0, 1, 2, 3]);\n    const a = {};\n    items.push(a);\n    expect(moveItem(items, a, -1)).toEqual([0, 1, 2, a, 3]);\n    expect(moveItem(items, a, -1)).toEqual([0, 1, a, 2, 3]);\n    expect(moveItem(items, a, +1)).toEqual([0, 1, 2, a, 3]);\n    expect(moveItem(items, a, +1)).toEqual([0, 1, 2, 3, a]);\n    expect(moveItem(items, a, +1)).toEqual([a, 0, 1, 2, 3]);\n    expect(moveItem(items, a, +1)).toEqual([0, a, 1, 2, 3]);\n    expect(moveItem(items, a, +5)).toEqual([0, a, 1, 2, 3]);\n    expect(moveItem(items, a, +20)).toEqual([0, a, 1, 2, 3]);\n    expect(moveItem(items, a, -20)).toEqual([0, a, 1, 2, 3]);\n    expect(moveItem(items, a, +4)).toEqual([a, 0, 1, 2, 3]);\n  });\n  \n  test(`last`, async () => {\n    expect(last([0, 1, 2])).toEqual(2);\n  }, 10);\n});\n\n\n","export function removeItem<T>(items: T[], item: T) {\n    const i = items.indexOf(item);\n    if (i === -1) return items;\n    items.splice(i, 1);\n    return items;\n}\n\nexport function moveItem<T>(items: T[], item: T, addIndex: number) {\n    const oldIndex = items.indexOf(item);\n    if (oldIndex === -1) return items;\n    let index = (oldIndex + addIndex) % 5;\n    if (index < 0) index += items.length;\n    if (oldIndex === index) return items;\n    items.splice(oldIndex, 1);\n    items.splice(index, 0, item);\n    return items;\n}\n\nexport function last<T>(items: T[]) {\n    return items[items.length - 1];\n}"],"names":["$8b11d7d70da98dc1$export$fe2d9b4e03920b4c","items","item","i","indexOf","splice","$8b11d7d70da98dc1$export$ec937e64de6c1257","addIndex","oldIndex","index","length","describe","test","expect","toEqual","a","push"],"version":3,"file":"array.spec.js.map","sourceRoot":"../"}