{"mappings":"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","sources":["<anon>","src/message.spec.ts","src/message.ts","src/stored.ts","src/json.ts"],"sourcesContent":["function $32904ed98b730a93$export$18c43dcebf00e571(v, defVal) {\n    try {\n        return JSON.parse(v);\n    } catch (error) {\n        return defVal;\n    }\n}\nfunction $32904ed98b730a93$export$a75c676177490cac(v, defVal, indented) {\n    try {\n        return JSON.stringify(v, null, indented ? 2 : 0);\n    } catch (error) {\n        return defVal;\n    }\n}\nfunction $32904ed98b730a93$export$9cd59f9826255e47(v, defVal) {\n    return $32904ed98b730a93$export$18c43dcebf00e571($32904ed98b730a93$export$a75c676177490cac(v), defVal);\n}\n\n\nlet $e7616b57c23a787b$var$_storage = globalThis.localStorage;\nfunction $e7616b57c23a787b$export$825479ec1107c193(storage) {\n    $e7616b57c23a787b$var$_storage = storage;\n}\nfunction $e7616b57c23a787b$export$43b36d76881373cf(key, defVal) {\n    const json = $e7616b57c23a787b$var$_storage.getItem(key);\n    return (0, $32904ed98b730a93$export$18c43dcebf00e571)(json, defVal);\n}\nfunction $e7616b57c23a787b$export$b6f24a8024dbaa15(key, value) {\n    const json = value !== undefined ? (0, $32904ed98b730a93$export$a75c676177490cac)(value) : undefined;\n    if (json === undefined) $e7616b57c23a787b$var$_storage.removeItem(key);\n    else $e7616b57c23a787b$var$_storage.setItem(key, json);\n}\n\n\nconst $457f7f72a9663328$var$nullMessageFilter = (v)=>v !== null && v !== undefined;\nclass $457f7f72a9663328$export$f69c19e57285b83a {\n    constructor(init){\n        /** Handlers */ this.hs = [];\n        this.val = init;\n    }\n    get() {\n        return this.val;\n    }\n    set(value) {\n        if (value !== this.val) {\n            const old = this.val;\n            this.val = value;\n            this.hs.forEach((h)=>h(value, old));\n        }\n        return this;\n    }\n    setCb(cb) {\n        this.set(cb(this.val));\n    }\n    on(h) {\n        this.hs.push(h);\n        if (!this.srcOff && this.src && this.h) this.srcOff = this.src.on(this.h);\n        return ()=>this.off(h);\n    }\n    off(h) {\n        this.hs.splice(this.hs.indexOf(h), 1);\n        if (this.srcOff && this.hs.length === 0) {\n            this.srcOff();\n            delete this.srcOff;\n        }\n    }\n    store(key) {\n        this.on((val)=>(0, $e7616b57c23a787b$export$b6f24a8024dbaa15)(key, val));\n        const val = (0, $e7616b57c23a787b$export$43b36d76881373cf)(key);\n        if (val !== undefined) this.set(val);\n        return this;\n    }\n    map(cb) {\n        const r = new $457f7f72a9663328$export$f69c19e57285b83a(cb(this.val));\n        r.src = this;\n        r.h = ()=>r.set(cb(this.val));\n        return r;\n    }\n    debounce(ms) {\n        let timer;\n        const r = new $457f7f72a9663328$export$f69c19e57285b83a(this.val);\n        r.src = this;\n        r.h = ()=>{\n            clearTimeout(timer);\n            timer = setTimeout(()=>r.set(this.val), ms);\n        };\n        return r;\n    }\n    toPromise(filter = $457f7f72a9663328$var$nullMessageFilter) {\n        return new Promise((resolve)=>{\n            if (filter(this.val)) return resolve(this.val);\n            const off = this.on((val)=>{\n                if (!filter(val)) return;\n                off();\n                resolve(val);\n            });\n        });\n    }\n}\nconst $457f7f72a9663328$export$defe85febe8b728c = {};\nfunction $457f7f72a9663328$export$2e2bcd8739ae039(key, init) {\n    if (key) return $457f7f72a9663328$export$defe85febe8b728c[key] || ($457f7f72a9663328$export$defe85febe8b728c[key] = new $457f7f72a9663328$export$f69c19e57285b83a(init));\n    return new $457f7f72a9663328$export$f69c19e57285b83a(init);\n}\n\n\ndescribe(\"Message\", ()=>{\n    test(`Message next and subscribe`, ()=>{\n        const message = new (0, $457f7f72a9663328$export$f69c19e57285b83a)(0);\n        expect(message.get()).toEqual(0);\n        let a = -1;\n        let b = -1;\n        const unsubscribeA = message.on((val)=>a = val);\n        const unsubscribeB = message.on((val)=>b = val);\n        message.set(1);\n        expect(message.get()).toEqual(1);\n        expect(a).toEqual(1);\n        expect(b).toEqual(1);\n        unsubscribeA();\n        message.set(2);\n        expect(message.get()).toEqual(2);\n        expect(a).toEqual(1);\n        expect(b).toEqual(2);\n        unsubscribeB();\n        message.set(3);\n        expect(message.get()).toEqual(3);\n        expect(a).toEqual(1);\n        expect(b).toEqual(2);\n    });\n    test(`Message toPromise`, async ()=>{\n        const message = new (0, $457f7f72a9663328$export$f69c19e57285b83a)(0);\n        let a = 1;\n        message.toPromise((val)=>val === 3).then((val)=>a = val);\n        expect(a).toEqual(1);\n        message.set(2);\n        expect(a).toEqual(1);\n        message.set(3);\n        console.debug(\"messagePromise a\", a);\n        const b = await message.toPromise();\n        expect(a).toEqual(3);\n        expect(b).toEqual(3);\n    });\n    test(`Message map`, async ()=>{\n        const message = new (0, $457f7f72a9663328$export$f69c19e57285b83a)(0);\n        const map = message.map((v)=>v + 1);\n        let v = map.get();\n        map.on((next)=>v = next);\n        expect(map.get()).toEqual(1);\n        expect(v).toEqual(1);\n        message.set(50);\n        expect(map.get()).toEqual(51);\n        expect(v).toEqual(51);\n    });\n    test(`Message getter setter`, ()=>{\n        const message = new (0, $457f7f72a9663328$export$f69c19e57285b83a)(0);\n        const getVal = message.get.bind(message);\n        const setVal = message.set.bind(message);\n        setVal(1);\n        expect(getVal()).toEqual(1);\n        setVal.call(undefined, 2);\n        expect(getVal.call(undefined)).toEqual(2);\n    });\n    test(\"message\", ()=>{\n        expect((0, $457f7f72a9663328$export$2e2bcd8739ae039)(null, 1)).not.toEqual((0, $457f7f72a9663328$export$2e2bcd8739ae039)(null, 2));\n        expect((0, $457f7f72a9663328$export$2e2bcd8739ae039)(\"a\", 1)).toEqual((0, $457f7f72a9663328$export$2e2bcd8739ae039)(\"a\", 2));\n    });\n});\n\n\n//# sourceMappingURL=message.spec.js.map\n","import message, { Message } from './message';\n\ndescribe('Message', () => {\n  test(`Message next and subscribe`, () => {\n    const message = new Message(0);\n    expect(message.get()).toEqual(0);\n\n    let a = -1;\n    let b = -1;\n\n    const unsubscribeA = message.on((val) => (a = val));\n\n    const unsubscribeB = message.on((val) => (b = val));\n\n    message.set(1);\n    expect(message.get()).toEqual(1);\n    expect(a).toEqual(1);\n    expect(b).toEqual(1);\n\n    unsubscribeA();\n    message.set(2);\n    expect(message.get()).toEqual(2);\n    expect(a).toEqual(1);\n    expect(b).toEqual(2);\n\n    unsubscribeB();\n    message.set(3);\n    expect(message.get()).toEqual(3);\n    expect(a).toEqual(1);\n    expect(b).toEqual(2);\n  });\n\n  test(`Message toPromise`, async () => {\n    const message = new Message(0);\n\n    let a = 1;\n    message.toPromise((val) => val === 3).then((val) => (a = val));\n\n    expect(a).toEqual(1);\n\n    message.set(2);\n    expect(a).toEqual(1);\n\n    message.set(3);\n    console.debug('messagePromise a', a);\n    const b = await message.toPromise();\n    expect(a).toEqual(3);\n    expect(b).toEqual(3);\n  });\n\n  test(`Message map`, async () => {\n    const message = new Message(0);\n    const map = message.map(v => v + 1);\n    let v = map.get();\n\n    map.on(next => v = next);\n\n    expect(map.get()).toEqual(1);\n    expect(v).toEqual(1);\n\n    message.set(50);\n    expect(map.get()).toEqual(51);\n    expect(v).toEqual(51);\n  });\n\n  test(`Message getter setter`, () => {\n    const message = new Message(0);\n    const getVal = message.get.bind(message);\n    const setVal = message.set.bind(message);\n\n    setVal(1);\n    expect(getVal()).toEqual(1);\n\n    setVal.call(this, 2);\n    expect(getVal.call(this)).toEqual(2);\n  });\n\n  test('message', () => {\n    expect(message(null, 1)).not.toEqual(message(null, 2));\n    expect(message('a', 1)).toEqual(message('a', 2));\n  });\n});\n","import { getStored, setStored } from \"./stored\";\n\nexport type MessagerHandler<T> = (value: T, oldValue: T) => void;\n\nexport type MessageFilter<T> = (value: T) => boolean;\nconst nullMessageFilter: MessageFilter<any> = (v: any) => v !== null && v !== undefined;\n\nexport class Message<T = any> {\n  /** Handlers */\n  private hs: MessagerHandler<T>[] = [];\n\n  /** Value */\n  val: T;\n\n  /** map and debounce */\n  private src?: Message;\n  private srcOff?: () => void;\n  private h?: MessagerHandler<any>;\n\n  constructor(init: T) {\n    this.val = init;\n  }\n  \n  get() {\n    return this.val;\n  }\n\n  set(value: T) {\n    if (value !== this.val) {\n      const old = this.val;\n      this.val = value;\n      this.hs.forEach((h) => h(value, old));\n    }\n    return this;\n  }\n\n  setCb(cb: (value: T) => T) {\n    this.set(cb(this.val));\n  }\n\n  on(h: MessagerHandler<T>) {\n    this.hs.push(h);\n    if (!this.srcOff && this.src && this.h) {\n      this.srcOff = this.src.on(this.h);\n    }\n    return () => this.off(h);\n  }\n\n  off(h: MessagerHandler<T>) {\n    this.hs.splice(this.hs.indexOf(h), 1);\n    if (this.srcOff && this.hs.length === 0) {\n      this.srcOff();\n      delete this.srcOff;\n    }\n  }\n  \n  store(key: string) {\n    this.on((val) => setStored(key, val));\n    const val = getStored(key);\n    if (val !== undefined) this.set(val);\n    return this;\n  }\n\n  map<U>(cb: (val: T) => U) {\n    const r = new Message<U>(cb(this.val));\n    r.src = this;\n    r.h = () => r.set(cb(this.val));\n    return r;\n  }\n\n  debounce(ms: number) {\n    let timer: any;\n    const r = new Message<T>(this.val);\n    r.src = this;\n    r.h = () => {\n      clearTimeout(timer);\n      timer = setTimeout(() => r.set(this.val), ms);\n    };\n    return r;\n  }\n\n  toPromise(filter: MessageFilter<T> = nullMessageFilter) {\n    return new Promise<T>((resolve) => {\n      if (filter(this.val)) return resolve(this.val);\n      const off = this.on((val) => {\n        if (!filter(val)) return;\n        off();\n        resolve(val);\n      });\n    });\n  }\n}\n\nexport const messages: Record<string, Message> = {};\nexport default function message<T = any>(key?: string|null, init?: T) {\n  if (key) return messages[key] || (messages[key] = new Message(init));\n  return new Message(init);\n}","import { getJson, parseJson } from \"./json\";\n\nexport interface Storage {\n    getItem(key: string): string | null;\n    removeItem(key: string): void;\n    setItem(key: string, value: string): void;\n}\n\nlet _storage: Storage = globalThis.localStorage;\n\nexport function setStorage(storage: Storage) {\n    _storage = storage;\n}\n\nexport function getStored<T = any>(key: string): T | undefined;\nexport function getStored<T = any>(key: string, defVal?: T): T;\nexport function getStored<T = any>(key: string, defVal?: T): T | undefined {\n    const json = _storage.getItem(key);\n    return parseJson(json, defVal);\n}\n\nexport function setStored<T = any>(key: string, value: T) {\n    const json = value !== undefined ? getJson(value) : undefined;\n    if (json === undefined) _storage.removeItem(key);\n    else _storage.setItem(key, json);\n}\n","export function parseJson<T = any>(v: any): T | undefined;\nexport function parseJson<T = any, TDef = any>(v: any, defVal: TDef): T | TDef;\nexport function parseJson<T = any, TDef = any>(v: any, defVal?: TDef): T | TDef | undefined {\n    try {\n        return JSON.parse(v) as T;\n    }\n    catch (error) {\n        return defVal;\n    }\n}\n\nexport function getJson(v: any): string | undefined;\nexport function getJson<TDef = any>(v: any, defVal: TDef, indented?: boolean): string | TDef;\nexport function getJson<TDef = any>(v: any, defVal?: TDef, indented?: boolean): string | TDef | undefined {\n    try {\n        return JSON.stringify(v, null, indented ? 2 : 0);\n    }\n    catch (error) {\n        return defVal;\n    }\n}\n\nexport function clone<T = any>(v: T): T | undefined;\nexport function clone<T = any>(v: T, defVal: T): T;\nexport function clone<T = any>(v: T, defVal?: T): T | undefined {\n    return parseJson(getJson(v), defVal);\n}"],"names":["$e7616b57c23a787b$var$_storage","globalThis","localStorage","$457f7f72a9663328$var$nullMessageFilter","v","$457f7f72a9663328$export$f69c19e57285b83a","constructor","init","hs","val","get","set","value","old","forEach","h","setCb","cb","on","push","srcOff","src","off","splice","indexOf","length","store","key","json","undefined","defVal","indented","JSON","stringify","error","removeItem","setItem","getItem","parse","map","r","debounce","ms","timer","clearTimeout","setTimeout","toPromise","filter","Promise","resolve","$457f7f72a9663328$export$defe85febe8b728c","$457f7f72a9663328$export$2e2bcd8739ae039","describe","test","message","expect","toEqual","a","b","unsubscribeA","unsubscribeB","then","console","debug","next","getVal","bind","setVal","call","not"],"version":3,"file":"message.spec.js.map","sourceRoot":"../"}