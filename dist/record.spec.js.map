{"mappings":"ACEA,SAAS,SAAU,KACjB,KAAK,OAAQ,KACX,IAAM,EAAI,CAAE,GAAI,KAAM,EAAG,IAAK,EACxB,EAAI,CAAE,GAAI,KAAM,EAAG,IAAK,EACxB,EAAI,CAAE,GAAI,KAAM,EAAG,IAAK,EAC9B,OAAO,ACPJ,SAAwC,CAAsC,EACjF,IAAM,EAAQ,MAAM,OAAA,CAAQ,GAAiB,EAAgB,OAAO,MAAA,CAAO,GAC3E,OAAO,OAAO,WAAA,CAAY,EAAM,GAAA,CAAI,AAAC,GAAS,CAAC,EAAK,EAAA,EAAM,GAAI,EAAK,EACvE,EDIgB,CAAC,EAAG,EAAG,EAAE,GAAG,OAAA,CAAQ,CAAE,GAAI,EAAG,GAAI,EAAG,GAAI,CAAE,EACxD,GAEA,KAAK,SAAU,KACb,IAAM,EAAI,CAAE,GAAI,KAAM,EAAG,IAAK,EACxB,EAAI,CAAE,GAAI,KAAM,EAAG,IAAK,EACxB,EAAI,CAAE,GAAI,KAAM,EAAG,IAAK,EAC9B,OAAO,ACTJ,SAAmB,CAAmC,CAAE,CAA4B,EACvF,IAAM,EAAQ,MAAM,OAAA,CAAQ,GAAc,EAAa,OAAO,MAAA,CAAO,GACrE,OAAO,OAAO,WAAA,CAAY,EAAM,GAAA,CAAI,AAAC,GAAS,CAAC,EAAQ,GAAO,EAAK,EACvE,EDMkB,CAAC,EAAG,EAAG,EAAE,CAAE,AAAA,GAAK,EAAE,CAAA,GAAI,OAAA,CAAQ,CAAE,GAAI,EAAG,GAAI,EAAG,GAAI,CAAE,EACpE,GAEA,KAAK,MAAO,SCPuC,EDWjD,QCXiD,EDWzB,AAAA,GAAK,EAAE,CAAA,CCVxB,OAAO,WAAA,CAAY,OAAO,OAAA,CDUtB,CAAE,EAHH,CAAE,GAAI,KAAM,EAAG,IAAK,EAGd,EAFN,CAAE,GAAI,KAAM,EAAG,IAAK,EAEX,EADT,CAAE,GAAI,KAAM,EAAG,IAAK,CACT,GCV4B,GAAA,CAAI,CAAC,CAAC,EAAK,EAAK,GAAK,CAAC,EAAK,EAAI,EAAM,GAAK,KDUxD,OAAA,CAAQ,CAAE,EAAG,KAAM,EAAG,KAAM,EAAG,IAAK,EACzE,EACF","sources":["<anon>","src/record.spec.ts","src/record.ts"],"sourcesContent":["function $9dc556bd2f7fdec4$export$a1920133d5b0a75(itemsOrRecord) {\n    const items = Array.isArray(itemsOrRecord) ? itemsOrRecord : Object.values(itemsOrRecord);\n    return Object.fromEntries(items.map((item)=>[\n            item.id || \"\",\n            item\n        ]));\n}\nfunction $9dc556bd2f7fdec4$export$cdb3963d1a6a04ba(itemsOrMap, getProp) {\n    const items = Array.isArray(itemsOrMap) ? itemsOrMap : Object.values(itemsOrMap);\n    return Object.fromEntries(items.map((item)=>[\n            getProp(item),\n            item\n        ]));\n}\nfunction $9dc556bd2f7fdec4$export$871de8747c9eaa88(record, map) {\n    return Object.fromEntries(Object.entries(record).map(([key, item])=>[\n            key,\n            map(item, key)\n        ]));\n}\n\n\ndescribe(\"record\", ()=>{\n    test(`byId`, ()=>{\n        const a = {\n            id: \"ka\",\n            p: \"pa\"\n        };\n        const b = {\n            id: \"kb\",\n            p: \"pb\"\n        };\n        const c = {\n            id: \"kc\",\n            p: \"pc\"\n        };\n        expect((0, $9dc556bd2f7fdec4$export$a1920133d5b0a75)([\n            a,\n            b,\n            c\n        ])).toEqual({\n            ka: a,\n            kb: b,\n            kc: c\n        });\n    });\n    test(`byProp`, ()=>{\n        const a = {\n            id: \"ka\",\n            p: \"pa\"\n        };\n        const b = {\n            id: \"kb\",\n            p: \"pb\"\n        };\n        const c = {\n            id: \"kc\",\n            p: \"pc\"\n        };\n        expect((0, $9dc556bd2f7fdec4$export$cdb3963d1a6a04ba)([\n            a,\n            b,\n            c\n        ], (i)=>i.p)).toEqual({\n            pa: a,\n            pb: b,\n            pc: c\n        });\n    });\n    test(`map`, ()=>{\n        const a = {\n            id: \"ka\",\n            p: \"pa\"\n        };\n        const b = {\n            id: \"kb\",\n            p: \"pb\"\n        };\n        const c = {\n            id: \"kc\",\n            p: \"pc\"\n        };\n        expect((0, $9dc556bd2f7fdec4$export$871de8747c9eaa88)({\n            a: a,\n            b: b,\n            c: c\n        }, (i)=>i.p)).toEqual({\n            a: \"pa\",\n            b: \"pb\",\n            c: \"pc\"\n        });\n    });\n});\n\n\n//# sourceMappingURL=record.spec.js.map\n","import { byId, byProp, map } from './record';\n\ndescribe('record', () => {\n  test(`byId`, () => {\n    const a = { id: 'ka', p: 'pa' };\n    const b = { id: 'kb', p: 'pb' };\n    const c = { id: 'kc', p: 'pc' };\n    expect(byId([a, b, c])).toEqual({ ka: a, kb: b, kc: c });\n  });\n\n  test(`byProp`, () => {\n    const a = { id: 'ka', p: 'pa' };\n    const b = { id: 'kb', p: 'pb' };\n    const c = { id: 'kc', p: 'pc' };\n    expect(byProp([a, b, c], i => i.p)).toEqual({ pa: a, pb: b, pc: c });\n  });\n\n  test(`map`, () => {\n    const a = { id: 'ka', p: 'pa' };\n    const b = { id: 'kb', p: 'pb' };\n    const c = { id: 'kc', p: 'pc' };\n    expect(map({ a, b, c }, i => i.p)).toEqual({ a: 'pa', b: 'pb', c: 'pc' });\n  });\n});","export function byId<T extends { id: string }>(itemsOrRecord: T[] | Record<string, T>): Record<string, T> {\n    const items = Array.isArray(itemsOrRecord) ? itemsOrRecord : Object.values(itemsOrRecord);\n    return Object.fromEntries(items.map((item) => [item.id || '', item]));\n};\n\nexport function byProp<T>(itemsOrMap: T[] | Record<string, T>, getProp: (item: T) => string): Record<string, T> {\n    const items = Array.isArray(itemsOrMap) ? itemsOrMap : Object.values(itemsOrMap);\n    return Object.fromEntries(items.map((item) => [getProp(item), item]));\n};\n\nexport function map<T, U>(record: Record<string, T>, map: (item: T, key: string) => U): Record<string, U> {\n    return Object.fromEntries(Object.entries(record).map(([key, item]) => [key, map(item, key)]));\n};"],"names":["describe","test","a","id","p","b","c","expect","itemsOrRecord","items","Array","isArray","Object","values","fromEntries","map","item","toEqual","ka","kb","kc","itemsOrMap","getProp","i","pa","pb","pc","entries","key"],"version":3,"file":"record.spec.js.map","sourceRoot":"../"}