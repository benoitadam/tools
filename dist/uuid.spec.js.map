{"mappings":"A,I,E,Q,UEAO,MAAM,EAAQ,AAAC,GACpB,AAAI,EAAO,UAAA,CACF,EAAO,UAAA,CAAW,IAAA,CAAK,GAE5B,EAAO,eAAA,CACF,KACL,IAAI,EAAO,IAAI,YAAY,GAC3B,EAAO,eAAA,CAAgB,GACvB,IAAM,EAAI,AAAC,GAAc,CAAI,CAAC,EAAE,CAAC,QAAA,CAAS,IAAI,QAAA,CAAS,EAAG,KAC1D,OAAO,EAAE,GAAK,EAAE,GAAK,IAAM,EAAE,GAAK,IAAM,EAAE,GAAK,IAAM,EAAE,GAAK,IAAM,EAAE,GAAK,EAAE,GAAK,EAAE,EACpF,EAEK,KAGL,IAAI,EAAI,GACN,EAAI,EACJ,EAAM,AAAgB,WAAhB,KAAK,MAAA,GAAyB,EACtC,KAAO,IAAM,IAAI,CACf,IAAI,EAAI,AALF,sCAKG,CAAC,EAAI,EAAE,CACd,EAAI,AAAK,GAAL,EACJ,EAAI,AAAK,KAAL,EAAW,EAAI,AAAK,EAAL,EAAY,EACjC,GAAK,AAAK,KAAL,GAAY,AAAK,KAAL,EAAW,EAAI,AAT1B,kBAS2B,CAAC,EAAE,CACpC,EAAK,EAAI,GAAK,EAAK,AAAgB,WAAhB,KAAK,MAAA,GAAyB,EAAI,GAAM,CAC7D,CACA,OAAO,CACT,EAGW,EAAqB,EAAM,GAAqB,CAAC,GAExD,EAAS,qEAEF,EAAS,AAAC,GAAgB,EAAO,IAAA,CAAK,EAAI,WAAhD,ID/BP,SAAS,OAAQ,KACf,IAAM,EAAW,CAAC,EAAY,IAC5B,KAAK,CAAC,OAAO,EAAE,EAAG,MAAM,EAAE,EAAM,CAAC,CAAE,IAAM,OAAO,AAAA,EAAO,IAAK,IAAA,CAAK,IAEnE,EAAS,uCAAwC,CAAA,GACjD,EAAS,uCAAwC,CAAA,GACjD,EAAS,uCAAwC,CAAA,GACjD,EAAS,uCAAwC,CAAA,GACjD,EAAS,uCAAwC,CAAA,GACjD,EAAS,uCAAwC,CAAA,GACjD,EAAS,oCAAqC,CAAA,GAE9C,IAAK,IAAI,EAAI,EAAG,EAAI,GAAI,IAAK,CAC3B,IAAM,EAAK,ACoBA,IDnBX,KAAK,CAAC,KAAK,EAAE,EAAG,CAAC,CAAE,IAAM,OAAO,AAAA,EAAO,IAAK,UAA5C,GACF,CAIA,IAAM,EAAQ,AAAA,EAAM,CAAE,WAAY,AAFnB,EAE0B,UAAnB,AAA8B,GACpD,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IAAK,CAC1B,IAAM,EAAM,IACZ,KAAK,CAAC,MAAM,EAAE,EAAI,CAAC,CAAE,IAAM,OAAO,AAAA,EAAO,IAAM,UAA/C,GACF,CAEA,IAAM,EAAQ,AAAA,EAAM,CAAE,gBAAiB,AARxB,EAQ+B,eAAxB,AAAwC,GAC9D,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IAAK,CAC1B,IAAM,EAAM,IACZ,KAAK,CAAC,MAAM,EAAE,EAAI,CAAC,CAAE,IAAM,OAAO,AAAA,EAAO,IAAM,UAA/C,GACF,CAEA,IAAM,EAAQ,AAAA,EAAM,CAAC,GACrB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IAAK,CAC1B,IAAM,EAAM,IACZ,KAAK,CAAC,MAAM,EAAE,EAAI,CAAC,CAAE,IAAM,OAAO,AAAA,EAAO,IAAM,UAA/C,GACF,CACF","sources":["<anon>","src/uuid.spec.ts","src/uuid.ts"],"sourcesContent":["var $9Qyfo$crypto = require(\"crypto\");\n\nconst $23b5898b5d511683$export$f2f3139038bea52c = (crypto)=>{\n    if (crypto.randomUUID) return crypto.randomUUID.bind(crypto);\n    if (crypto.getRandomValues) return ()=>{\n        var buff = new Uint16Array(8);\n        crypto.getRandomValues(buff);\n        const S = (i)=>buff[i].toString(16).padStart(4, \"0\");\n        return S(0) + S(1) + \"-\" + S(2) + \"-\" + S(3) + \"-\" + S(4) + \"-\" + S(5) + S(6) + S(7);\n    };\n    return ()=>{\n        let h = \"0123456789abcdef\";\n        let k = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\";\n        let u = \"\", i = 0, rb = Math.random() * 0xffffffff | 0;\n        while(i++ < 36){\n            var c = k[i - 1], r = rb & 0xf, v = c == \"x\" ? r : r & 0x3 | 0x8;\n            u += c == \"-\" || c == \"4\" ? c : h[v];\n            rb = i % 8 == 0 ? Math.random() * 0xffffffff | 0 : rb >> 4;\n        }\n        return u;\n    };\n};\n\nconst $23b5898b5d511683$export$31b40729666a4ae0 = $23b5898b5d511683$export$f2f3139038bea52c($9Qyfo$crypto || {});\nconst $23b5898b5d511683$var$regExp = /^[0-9a-f]{8}\\-[0-9a-f]{4}\\-[0-9a-f]{4}\\-[0-9a-f]{4}\\-[0-9a-f]{12}$/;\nconst $23b5898b5d511683$export$a0ae7fd88fd42cb1 = (str)=>$23b5898b5d511683$var$regExp.test(str.toLowerCase());\nvar $23b5898b5d511683$export$2e2bcd8739ae039 = $23b5898b5d511683$export$31b40729666a4ae0;\n\n\n\ndescribe(\"uuid\", ()=>{\n    const testUuid = (id, value)=>test(`isUuid(${id}) === ${value}`, ()=>expect((0, $23b5898b5d511683$export$a0ae7fd88fd42cb1)(id)).toBe(value));\n    testUuid(\"00000000-0000-0000-0000-000000000000\", true);\n    testUuid(\"ffffffff-ffff-ffff-ffff-ffffffffffff\", true);\n    testUuid(\"7ae77ebe-16c8-458b-8a44-4396dbe7f6f4\", true);\n    testUuid(\"7AE77EBE-16C8-458B-8A44-4396DBE7F6F4\", true);\n    testUuid(\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\", false);\n    testUuid(\"7ae77ebea16c8-458b-8a44-4396dbe7f6f4\", false);\n    testUuid(\"7ae77ebea16c8458b8a444396dbe7f6f4\", false);\n    for(let i = 0; i < 10; i++){\n        const id = (0, $23b5898b5d511683$export$2e2bcd8739ae039)();\n        test(`uuid ${id}`, ()=>expect((0, $23b5898b5d511683$export$a0ae7fd88fd42cb1)(id)).toBeTruthy());\n    }\n    const crypto = $9Qyfo$crypto;\n    const uuid1 = (0, $23b5898b5d511683$export$f2f3139038bea52c)({\n        randomUUID: crypto.randomUUID\n    });\n    for(let i = 0; i < 2; i++){\n        const id1 = uuid1();\n        test(`uuid1 ${id1}`, ()=>expect((0, $23b5898b5d511683$export$a0ae7fd88fd42cb1)(id1)).toBeTruthy());\n    }\n    const uuid2 = (0, $23b5898b5d511683$export$f2f3139038bea52c)({\n        getRandomValues: crypto.getRandomValues\n    });\n    for(let i = 0; i < 2; i++){\n        const id2 = uuid2();\n        test(`uuid2 ${id2}`, ()=>expect((0, $23b5898b5d511683$export$a0ae7fd88fd42cb1)(id2)).toBeTruthy());\n    }\n    const uuid3 = (0, $23b5898b5d511683$export$f2f3139038bea52c)({});\n    for(let i = 0; i < 2; i++){\n        const id3 = uuid3();\n        test(`uuid3 ${id3}`, ()=>expect((0, $23b5898b5d511683$export$a0ae7fd88fd42cb1)(id3)).toBeTruthy());\n    }\n});\n\n\n//# sourceMappingURL=uuid.spec.js.map\n","import uuid, { isUuid, _uuid } from './uuid';\n\ndescribe('uuid', () => {\n  const testUuid = (id: string, value: boolean) =>\n    test(`isUuid(${id}) === ${value}`, () => expect(isUuid(id)).toBe(value));\n\n  testUuid('00000000-0000-0000-0000-000000000000', true);\n  testUuid('ffffffff-ffff-ffff-ffff-ffffffffffff', true);\n  testUuid('7ae77ebe-16c8-458b-8a44-4396dbe7f6f4', true);\n  testUuid('7AE77EBE-16C8-458B-8A44-4396DBE7F6F4', true);\n  testUuid('xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx', false);\n  testUuid('7ae77ebea16c8-458b-8a44-4396dbe7f6f4', false);\n  testUuid('7ae77ebea16c8458b8a444396dbe7f6f4', false);\n\n  for (let i = 0; i < 10; i++) {\n    const id = uuid();\n    test(`uuid ${id}`, () => expect(isUuid(id)).toBeTruthy());\n  }\n\n  const crypto = require('crypto');\n\n  const uuid1 = _uuid({ randomUUID: crypto.randomUUID });\n  for (let i = 0; i < 2; i++) {\n    const id1 = uuid1();\n    test(`uuid1 ${id1}`, () => expect(isUuid(id1)).toBeTruthy());\n  }\n\n  const uuid2 = _uuid({ getRandomValues: crypto.getRandomValues });\n  for (let i = 0; i < 2; i++) {\n    const id2 = uuid2();\n    test(`uuid2 ${id2}`, () => expect(isUuid(id2)).toBeTruthy());\n  }\n\n  const uuid3 = _uuid({});\n  for (let i = 0; i < 2; i++) {\n    const id3 = uuid3();\n    test(`uuid3 ${id3}`, () => expect(isUuid(id3)).toBeTruthy());\n  }\n});\n","export const _uuid = (crypto: any) => {\n  if (crypto.randomUUID) {\n    return crypto.randomUUID.bind(crypto);\n  }\n  if (crypto.getRandomValues) {\n    return () => {\n      var buff = new Uint16Array(8);\n      crypto.getRandomValues(buff);\n      const S = (i: number) => buff[i].toString(16).padStart(4, '0');\n      return S(0) + S(1) + '-' + S(2) + '-' + S(3) + '-' + S(4) + '-' + S(5) + S(6) + S(7);\n    };\n  }\n  return () => {\n    let h = '0123456789abcdef';\n    let k = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';\n    let u = '',\n      i = 0,\n      rb = (Math.random() * 0xffffffff) | 0;\n    while (i++ < 36) {\n      var c = k[i - 1],\n        r = rb & 0xf,\n        v = c == 'x' ? r : (r & 0x3) | 0x8;\n      u += c == '-' || c == '4' ? c : h[v];\n      rb = i % 8 == 0 ? (Math.random() * 0xffffffff) | 0 : rb >> 4;\n    }\n    return u;\n  };\n};\n\nexport const uuid: () => string = _uuid(require('crypto') || {});\n\nconst regExp = /^[0-9a-f]{8}\\-[0-9a-f]{4}\\-[0-9a-f]{4}\\-[0-9a-f]{4}\\-[0-9a-f]{12}$/;\n\nexport const isUuid = (str: string) => regExp.test(str.toLowerCase());\n\nexport default uuid;"],"names":["$9Qyfo$crypto","require","$23b5898b5d511683$export$f2f3139038bea52c","crypto","randomUUID","bind","getRandomValues","buff","Uint16Array","S","i","toString","padStart","u","rb","Math","random","c","k","r","v","h","$23b5898b5d511683$export$31b40729666a4ae0","$23b5898b5d511683$var$regExp","$23b5898b5d511683$export$a0ae7fd88fd42cb1","str","test","toLowerCase","describe","testUuid","id","value","expect","toBe","toBeTruthy","uuid1","id1","uuid2","id2","uuid3","id3"],"version":3,"file":"uuid.spec.js.map","sourceRoot":"../"}