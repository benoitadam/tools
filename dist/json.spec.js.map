{"mappings":"AEEO,SAAS,EAA+B,CAAM,CAAE,CAAa,EAChE,GAAI,CACA,OAAO,KAAK,KAAA,CAAM,EACtB,CACA,MAAO,EAAO,CACV,OAAO,CACX,CACJ,CAIO,SAAS,EAAoB,CAAM,CAAE,CAAa,CAAE,CAAkB,EACzE,GAAI,CACA,OAAO,KAAK,SAAA,CAAU,EAAG,KAAM,EAAW,EAAI,EAClD,CACA,MAAO,EAAO,CACV,OAAO,CACX,CACJ,CDlBA,SAAS,OAAQ,KACf,KAAK,YAAa,KAChB,OAAO,AAAA,EAAU,WAAW,OAAA,CAAQ,QACpC,OAAO,AAAA,EAAU,YAAY,OAAA,CAAQ,CAAE,EAAG,CAAE,GAC5C,OAAO,AAAA,EAAU,SAAS,OAAA,CAAQ,KAAA,GAClC,OAAO,AAAA,EAAU,OAAQ,UAAU,OAAA,CAAQ,QAC7C,GAEA,KAAK,UAAW,KACd,OAAO,AAAA,EAAQ,SAAS,OAAA,CAAQ,UAChC,OAAO,AAAA,EAAQ,CAAE,EAAG,CAAE,IAAI,OAAA,CAAQ,WAClC,IAAI,EAAS,CAAC,CACd,CAAA,EAAE,CAAA,CAAI,EACN,OAAO,AAAA,EAAQ,IAAI,OAAA,CAAQ,KAAA,GAC3B,OAAO,AAAA,EAAQ,EAAG,UAAU,OAAA,CAAQ,QACtC,GAEA,KAAK,QAAS,KACZ,IAAM,EAAI,CAAE,EAAG,CAAE,EACjB,OCIO,EAAU,EDJJ,QCGoB,KAAA,IDHX,OAAA,CAAQ,QAC9B,OAAO,ACGA,EAAU,EDHJ,GAAG,CAAE,EAAG,CAAE,GAAG,CAAA,EAAG,OAAA,CAAQ,EAAE,CAAhB,EACvB,IAAM,ECEC,EAAU,EDFD,GCCiB,KAAA,EDAjC,CAAA,EAAE,CAAA,CAAI,EACN,OAAO,GAAG,GAAA,CAAI,OAAA,CAAQ,EACxB,EACF","sources":["<anon>","src/json.spec.ts","src/json.ts"],"sourcesContent":["function $32904ed98b730a93$export$18c43dcebf00e571(v, defVal) {\n    try {\n        return JSON.parse(v);\n    } catch (error) {\n        return defVal;\n    }\n}\nfunction $32904ed98b730a93$export$a75c676177490cac(v, defVal, indented) {\n    try {\n        return JSON.stringify(v, null, indented ? 2 : 0);\n    } catch (error) {\n        return defVal;\n    }\n}\nfunction $32904ed98b730a93$export$9cd59f9826255e47(v, defVal) {\n    return $32904ed98b730a93$export$18c43dcebf00e571($32904ed98b730a93$export$a75c676177490cac(v), defVal);\n}\n\n\ndescribe(\"json\", ()=>{\n    test(`parseJson`, ()=>{\n        expect((0, $32904ed98b730a93$export$18c43dcebf00e571)('\"abcd\"')).toEqual(\"abcd\");\n        expect((0, $32904ed98b730a93$export$18c43dcebf00e571)('{\"a\":1}')).toEqual({\n            a: 1\n        });\n        expect((0, $32904ed98b730a93$export$18c43dcebf00e571)('{\"a1')).toEqual(undefined);\n        expect((0, $32904ed98b730a93$export$18c43dcebf00e571)('{\"a1', \"error\")).toEqual(\"error\");\n    });\n    test(`getJson`, ()=>{\n        expect((0, $32904ed98b730a93$export$a75c676177490cac)(\"abcd\")).toEqual('\"abcd\"');\n        expect((0, $32904ed98b730a93$export$a75c676177490cac)({\n            a: 1\n        })).toEqual('{\"a\":1}');\n        var a = {};\n        a.a = a;\n        expect((0, $32904ed98b730a93$export$a75c676177490cac)(a)).toEqual(undefined);\n        expect((0, $32904ed98b730a93$export$a75c676177490cac)(a, \"error\")).toEqual(\"error\");\n    });\n    test(`clone`, ()=>{\n        const a = {\n            n: 1\n        };\n        expect((0, $32904ed98b730a93$export$9cd59f9826255e47)(\"abcd\")).toEqual(\"abcd\");\n        expect((0, $32904ed98b730a93$export$9cd59f9826255e47)(a, {\n            n: 2\n        }).n).toEqual(a.n);\n        const b = (0, $32904ed98b730a93$export$9cd59f9826255e47)(a);\n        b.n = 2;\n        expect(b).not.toEqual(a);\n    });\n});\n\n\n//# sourceMappingURL=json.spec.js.map\n","import { parseJson, getJson, clone } from './json';\n\ndescribe('json', () => {\n  test(`parseJson`, () => {\n    expect(parseJson('\"abcd\"')).toEqual('abcd');\n    expect(parseJson('{\"a\":1}')).toEqual({ a: 1 });\n    expect(parseJson('{\"a1')).toEqual(undefined);\n    expect(parseJson('{\"a1', 'error')).toEqual('error');\n  });\n\n  test(`getJson`, () => {\n    expect(getJson('abcd')).toEqual('\"abcd\"');\n    expect(getJson({ a: 1 })).toEqual('{\"a\":1}');\n    var a: any = {};\n    a.a = a;\n    expect(getJson(a)).toEqual(undefined);\n    expect(getJson(a, 'error')).toEqual('error');\n  });\n  \n  test(`clone`, () => {\n    const a = { n: 1 };\n    expect(clone(\"abcd\")).toEqual(\"abcd\");\n    expect(clone(a, { n: 2 }).n).toEqual(a.n);\n    const b = clone(a);\n    b.n = 2;\n    expect(b).not.toEqual(a);\n  });\n});\n\n\n","export function parseJson<T = any>(v: any): T | undefined;\nexport function parseJson<T = any, TDef = any>(v: any, defVal: TDef): T | TDef;\nexport function parseJson<T = any, TDef = any>(v: any, defVal?: TDef): T | TDef | undefined {\n    try {\n        return JSON.parse(v) as T;\n    }\n    catch (error) {\n        return defVal;\n    }\n}\n\nexport function getJson(v: any): string | undefined;\nexport function getJson<TDef = any>(v: any, defVal: TDef, indented?: boolean): string | TDef;\nexport function getJson<TDef = any>(v: any, defVal?: TDef, indented?: boolean): string | TDef | undefined {\n    try {\n        return JSON.stringify(v, null, indented ? 2 : 0);\n    }\n    catch (error) {\n        return defVal;\n    }\n}\n\nexport function clone<T = any>(v: T): T | undefined;\nexport function clone<T = any>(v: T, defVal: T): T;\nexport function clone<T = any>(v: T, defVal?: T): T | undefined {\n    return parseJson(getJson(v), defVal);\n}"],"names":["$32904ed98b730a93$export$18c43dcebf00e571","v","defVal","JSON","parse","error","$32904ed98b730a93$export$a75c676177490cac","indented","stringify","describe","test","expect","toEqual","a","undefined","n","b","not"],"version":3,"file":"json.spec.js.map","sourceRoot":"../"}